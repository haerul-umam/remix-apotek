{
  "version": 3,
  "sources": ["../../../app/routes/_app.supplier/index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_app.supplier/index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_app.supplier/index.tsx\");\n  import.meta.hot.lastModified = \"1705419503321.191\";\n}\n// REMIX HMR END\n\nimport ButtonAdd from \"~/presentation/components/Button/ButtonAdd\";\nimport CustomTable from \"~/presentation/components/Table/Table\";\nimport ActionButtons from \"~/presentation/components/Button/ActionButtons\";\nimport InputSearch from \"~/presentation/components/Input/InputSearch\";\nimport { Outlet, useFetcher, useNavigate } from \"@remix-run/react\";\nimport { Group, Table } from \"@mantine/core\";\nimport { typedjson, useTypedLoaderData } from \"remix-typedjson\";\nimport { findAllSupplier } from \"~/services/supplier.server\";\nimport { requireUserSession } from \"~/services/login.server\";\nexport const meta = () => {\n  return [{\n    title: \"Data supplier\"\n  }];\n};\nexport default function SupplierPage() {\n  _s();\n  const loader = useTypedLoaderData();\n  const navigate = useNavigate();\n  const fetcher = useFetcher();\n  const onUpdate = id => navigate(`/supplier/${id}`);\n  const onDelete = id => fetcher.submit(null, {\n    action: `/supplier/${id}`,\n    method: \"DELETE\"\n  });\n  return <>\n\t\t\t<Outlet />\n\t\t\t<main>\n\t\t\t\t<Group justify=\"space-between\">\n\t\t\t\t\t<ButtonAdd label=\"Tambah Supplier\" goTo=\"tambah\" />\n\t\t\t\t\t<InputSearch mb=\"sm\" />\n\t\t\t\t</Group>\n\t\t\t\t<CustomTable totalPagination={loader?.data?.pagination.pageCount || 0} header={[\"Nama\", \"Telpon\"]} renderActionHeader>\n\t\t\t\t\t{loader?.data?.data.map(data => <Table.Tr key={data.id}>\n\t\t\t\t\t\t\t<Table.Td>{data.name}</Table.Td>\n\t\t\t\t\t\t\t<Table.Td>{data.hp}</Table.Td>\n\t\t\t\t\t\t\t<Table.Td>\n\t\t\t\t\t\t\t\t<ActionButtons onUpdate={() => onUpdate(data.id)} onDelete={() => onDelete(data.id)} />\n\t\t\t\t\t\t\t</Table.Td>\n\t\t\t\t\t\t</Table.Tr>)}\n\t\t\t\t</CustomTable>\n\t\t\t</main>\n\t\t</>;\n}\n_s(SupplierPage, \"xeuYrHMmvJi6W+nXXw8ZVXI+64s=\", false, function () {\n  return [useTypedLoaderData, useNavigate, useFetcher];\n});\n_c = SupplierPage;\nexport const loader = async ({\n  request\n}) => {\n  await requireUserSession(request, \"ADMIN\");\n  const searchParams = new URL(request.url).searchParams;\n  const querySearch = searchParams.get(\"search\") || \"\";\n  const queryPage = +(searchParams.get(\"page\") || 0);\n  const page = queryPage > 0 ? queryPage - 1 : 0;\n  const data = await findAllSupplier({\n    page: page,\n    search: querySearch\n  });\n  return typedjson(data);\n};\nvar _c;\n$RefreshReg$(_c, \"SupplierPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,sBAAgC;AAChC,mBAAmC;AAgB1B;AA5CT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,yCAA2C,EAAE;AAAA,EACtF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAoC;AACpC,cAAY,IAAI,eAAe;AACjC;AAYO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AACe,SAAR,eAAgC;AACrC,KAAG;AACH,QAAM,SAAS,mBAAmB;AAClC,QAAM,WAAW,YAAY;AAC7B,QAAM,UAAU,WAAW;AAC3B,QAAM,WAAW,QAAM,SAAS,aAAa,IAAI;AACjD,QAAM,WAAW,QAAM,QAAQ,OAAO,MAAM;AAAA,IAC1C,QAAQ,aAAa;AAAA,IACrB,QAAQ;AAAA,EACV,CAAC;AACD,SAAO,sFACN;AAAA,uDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,IACR,mDAAC,UACA;AAAA,yDAAC,SAAM,SAAQ,iBACd;AAAA,2DAAC,aAAU,OAAM,mBAAkB,MAAK,YAAxC;AAAA;AAAA;AAAA;AAAA,eAAiD;AAAA,QACjD,mDAAC,eAAY,IAAG,QAAhB;AAAA;AAAA;AAAA;AAAA,eAAqB;AAAA,WAFtB;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,eAAY,iBAAiB,QAAQ,MAAM,WAAW,aAAa,GAAG,QAAQ,CAAC,QAAQ,QAAQ,GAAG,oBAAkB,MACnH,kBAAQ,MAAM,KAAK,IAAI,UAAQ,mDAAC,MAAM,IAAN,EAC/B;AAAA,2DAAC,MAAM,IAAN,EAAU,eAAK,QAAhB;AAAA;AAAA;AAAA;AAAA,eAAqB;AAAA,QACrB,mDAAC,MAAM,IAAN,EAAU,eAAK,MAAhB;AAAA;AAAA;AAAA;AAAA,eAAmB;AAAA,QACnB,mDAAC,MAAM,IAAN,EACA,6DAAC,iBAAc,UAAU,MAAM,SAAS,KAAK,EAAE,GAAG,UAAU,MAAM,SAAS,KAAK,EAAE,KAAlF;AAAA;AAAA;AAAA;AAAA,eAAqF,KADtF;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAL6C,KAAK,IAApB;AAAA;AAAA;AAAA;AAAA,aAM/B,CAAW,KAPb;AAAA;AAAA;AAAA;AAAA,aAQA;AAAA,SAbD;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,OAhBM;AAAA;AAAA;AAAA;AAAA,SAiBP;AACF;AACA,GAAG,cAAc,gCAAgC,OAAO,WAAY;AAClE,SAAO,CAAC,oBAAoB,aAAa,UAAU;AACrD,CAAC;AACD,KAAK;AAeL,IAAI;AACJ,aAAa,IAAI,cAAc;AAE/B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
