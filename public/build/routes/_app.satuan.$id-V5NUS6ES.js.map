{
  "version": 3,
  "sources": ["../../../app/routes/_app.satuan.$id/index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_app.satuan.$id/index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_app.satuan.$id/index.tsx\");\n  import.meta.hot.lastModified = \"1705419486781.1086\";\n}\n// REMIX HMR END\n\nimport { redirect } from \"@remix-run/node\";\nimport { typedjson } from \"remix-typedjson\";\nimport { deleteSatuan, findOneSatuan, updateSatuan, updateSatuanDto } from \"~/services/satuan.server\";\nimport SatuanForm from \"~/presentation/components/Form/SatuanForm\";\nimport { requireUserSession } from \"~/services/login.server\";\nexport default function UpdateSatuan() {\n  return <SatuanForm />;\n}\n_c = UpdateSatuan;\nexport const meta = () => {\n  return [{\n    title: \"Ubah satuan\"\n  }];\n};\nexport const loader = async ({\n  params,\n  request\n}) => {\n  await requireUserSession(request, \"ADMIN\");\n  const data = await findOneSatuan(+params.id);\n  if (data.status === 404) throw new Response(\"Data tidak ditemukan\", {\n    status: 404\n  });\n  return typedjson(data, {\n    status: data.status\n  });\n};\nexport const action = async ({\n  request,\n  params\n}) => {\n  await requireUserSession(request, \"ADMIN\");\n  const {\n    method\n  } = request;\n  const formData = await request.formData();\n  const id = +params.id;\n  if (method === \"PATCH\") {\n    const schema = updateSatuanDto.safeParse(formData);\n    if (!schema.success) {\n      return typedjson({\n        message: schema.error.errors[0].message,\n        status: 400\n      }, {\n        status: 400\n      });\n    }\n    const data = await updateSatuan(schema.data, id);\n    return typedjson(data, {\n      status: data.status\n    });\n  }\n  if (method === \"DELETE\") {\n    await deleteSatuan(id);\n    return redirect(\"/satuan\");\n  }\n  throw new Response(\"Method not allowed\", {\n    status: 404\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"UpdateSatuan\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,kBAAyB;AAEzB,oBAA2E;AAE3E,mBAAmC;AAE1B;AAzBT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2CAA6C,EAAE;AAAA,EACxF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsC;AACtC,cAAY,IAAI,eAAe;AACjC;AAQe,SAAR,eAAgC;AACrC,SAAO,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,SAAY;AACrB;AACA,KAAK;AACE,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AA+CA,IAAI;AACJ,aAAa,IAAI,cAAc;AAE/B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
